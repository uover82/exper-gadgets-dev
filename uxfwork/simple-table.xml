<?xml version="1.0" encoding="UTF-8"?>
<Module>

  <ModulePrefs
      title="Simple Table Gadget"
     description="Official Google Gadget. A simple table presenting the data of a table query result."
      author="Google Engineering"
      author_affiliation="Google Inc."
      author_email="visualization.api+simple-table@gmail.com"
      screenshot="http://www.google.com/ig/modules/simple-table.png"
      thumbnail="http://www.google.com/ig/modules/simple-table-thm.png">
    <Require feature="idi" />
    <Require feature="locked-domain" />
  </ModulePrefs>

  <UserPref name="_table_query_url" display_name="Data source url" required="true"/>
  <UserPref name="_table_query_refresh_interval" display_name="Data refresh interval (minutes)" default_value="300" datatype="enum" required="false">
    <EnumValue value="0" display_value="Do not refresh"/>
    <EnumValue value="60" display_value="1"/>
    <EnumValue value="300" display_value="5"/>
    <EnumValue value="1800" display_value="30"/>
  </UserPref>
  <UserPref name="disableHtml" display_name="Disable Html" datatype="bool" default_value="false"/>
  <UserPref name="hl1column" display_name="__MSG_hl1column__" required="false" />
  <UserPref name="hl1floor" display_name="__MSG_hl1floor__" required="false" />
  <UserPref name="hl1ceiling" display_name="__MSG_hl1ceiling__" required="false" />
  <UserPref name="hl2column" display_name="__MSG_hl2column__" required="false" />
  <UserPref name="hl2floor" display_name="__MSG_hl2floor__" required="false" />
  <UserPref name="hl2ceiling" display_name="__MSG_hl2ceiling__" required="false" />
  <UserPref name="sortcolumn" display_name="__MSG_sort_column__" required="false" />
  <!--
  This is a sample gadget, that uses the Google Visualization API to read data
  from a data source, and displays it as an html table.
  -->

  <Content type="html"><![CDATA[

  <!-- Load the Google common loader, that is later used to load the Visualization API. -->
  <script src="http://www.google.com/jsapi" type="text/javascript"></script>

  <div id="tablediv" style="overflow: auto;"><img src="http://www.google.com/ig/images/spinner.gif" /></div>

  <script>
    var gadgetHelper = null;
    var table = null; 

    _IG_RegisterOnloadHandler(loadVisualizationAPI);

    /**
     * Load the Google Visualization API
     */
    function loadVisualizationAPI() {
      google.load("visualization", "1", {"packages": ["table"]});
      google.setOnLoadCallback(sendQuery);
    }

    /**
     * Create a query from the user prefs, and then send it to the data source.
     * This method is called once the visualization API is fully loaded.
     * Note that in the last line, a callback function is specified to be
     * called once the response is received from the data source.
     */
    function sendQuery() {
      var prefs = new _IG_Prefs(); // User preferences
      var tableDiv = _gel('tablediv');
      tableDiv.style.width = document.body.clientWidth + 'px';
      tableDiv.style.height = document.body.clientHeight + 'px';
      table = new google.visualization.Table(tableDiv);

      gadgetHelper = new google.visualization.GadgetHelper();
      var query = gadgetHelper.createQueryFromPrefs(prefs);
      query.send(handleQueryResponse);
    }

    /**
     * Query response handler function.
     * Called by the Google Visualization API once the response is received.
     * Takes the query response and formats it as a table.
     */
    function handleQueryResponse(response) {
      // Use the visualization GadgetHelper class to validate the data, and
      // for error handling.
      if (!gadgetHelper.validateResponse(response)) {
        // Default error handling was done, just leave.
        return;
      };
      var data = response.getDataTable();

      // Take the data table from the response, and format it.
      var options = {showRowNumber: false};
      var prefs = new _IG_Prefs(); // User preferences
      options['allowHtml'] = !prefs.getBool("disableHtml");

      // set up gradient row highlghting based on column and floor/
      // ceiling value range
      var hl1column = prefs.getInt('hl1column');
      var hl1floor = prefs.getFloat('hl1floor');
      var hl1ceiling = prefs.getFloat('hl1ceiling');
      var hl2column = prefs.getInt('hl2column');
      var hl2floor = prefs.getFloat('hl2floor');
      var hl2ceiling = prefs.getFloat('hl2ceiling');
      var sortcolumn = prefs.getInt('sortcolumn');

      var url = prefs.getString('_table_query_url');
      if ( url.indexOf('_sum') && ( csds=( url.indexOf( '.csv' )))) {
        var date = url.substring( csds-8,csds );
        var month = date.substring( 0,2 )*1;
        var day = date.substring( 2,4 )*1;
        if (( month==6 && day<2 ) || month<6 ) {
          hl1floor *= 100; hl1ceiling *= 100;
        }
      }

      /**
       * Numerically sort datasource by a specified column
       */
      if ( sortcolumn!=null && sortcolumn>=0 ) {
        var scid = data.addColumn( 'number' );
        for ( var i=0;i<data.getNumberOfRows();i++ )
          data.setValue( i,scid,Math.floor(data.getValue(i,sortcolumn)*10000)/10000 );

        data.sort( {column:scid,desc:true} );
        data.removeColumn( scid );
      }

      colorFormatRows( data,hl1column,hl1floor,hl1ceiling,
                       hl2column,hl2floor,hl2ceiling );

      table.draw(data, options);

      google.visualization.events.addListener( document.body,'onunload',unloadTable );
      //google.visualization.events.addListener( table, 'onunload', unloadTable );
    };

    /**
     * Color format table rows using a gradient scale which is an average
     * of 1-4 specified columns.
     */
    function colorFormatRows( data,c1,c1_hlfloor,c1_hlceiling,c2,c2_hlfloor,c2_hlceiling ) {

      function findRatios( data,c,c_hlfloor,c_hlceiling ) {
        var c_ratios = [];
        var c_range = c_hlceiling-c_hlfloor;
        var v;
        for ( var i = 0;i<data.getNumberOfRows();i++ ) {
          v = data.getValue( i,c );
          if ( v>=c_hlfloor )
            c_ratios[i] = v/c_range;
          else
            c_ratios[i] = 0;
        }

        return c_ratios;
      };

      if ( c1!=null ) {
        var ratios = [];
        var hlfloor = null;
        var hlceiling = null;
        var d = data.getValue( 0,0 );
        
        var c1_ratios = findRatios( data,c1,c1_hlfloor,c1_hlceiling );
        if ( c2!=null ) {
          var c2_ratios = findRatios( data,c2,c2_hlfloor,c2_hlceiling );
          for ( var i = 0;i<data.getNumberOfRows();i++ )
            ratios[i] = ( c1_ratios[i]+c2_ratios[i] )/2;
          hlfloor = ( c1_hlfloor+c2_hlfloor )/2;
          hlceiling = ( c1_hlceiling+c2_hlceiling )/2;
        }
        else {
          ratios = c1_ratios;
          hlfloor = c1_hlfloor;
          hlceiling = c1_hlceiling;
        }

        var formatter = new google.visualization.ColorFormat();
        formatter.addGradientRange( hlfloor,hlceiling,'black','white','gold' );

        var cid = data.addColumn( 'number','hl' );
        var range = hlceiling-hlfloor;
        for ( var i = 0;i<data.getNumberOfRows();i++ )
          data.setValue( i,cid,ratios[i]*range );
        formatter.format( data,cid );

        var p;
        for ( var i=0;i<data.getNumberOfRows();i++ ) {
          p = data.getProperties( i,cid );
          for ( var j=0;j<data.getNumberOfColumns();j++ )
            data.setProperties( i,j,p );
        }

        data.removeColumn( cid );
      }
    };

    function unloadTable(e) {
      removeChild(tableDiv);
    };

  </script>

  ]]>
  </Content>
</Module>

